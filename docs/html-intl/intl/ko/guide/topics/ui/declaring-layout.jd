page.title=레이아웃
page.tags=view,viewgroup
@jd:body

<div id="qv-wrapper">
<div id="qv">
  <h2>이 문서의 내용</h2>
<ol>
  <li><a href="#write">XML 쓰기</a></li>
  <li><a href="#load">XML 리소스 로딩</a></li>
  <li><a href="#attributes">속성</a>
    <ol>
      <li><a href="#id">ID</a></li>
      <li><a href="#layout-params">레이아웃 매개변수</a></li>
    </ol>
  </li>
  <li><a href="#Position">레이아웃 위치</a></li>
  <li><a href="#SizePaddingMargins">크기, 안쪽 여백 및 여백</a></li>
  <li><a href="#CommonLayouts">보편적인 레이아웃</a></li>
  <li><a href="#AdapterViews">어댑터로 레이아웃 구축하기</a>
    <ol>
      <li><a href="#FillingTheLayout">데이터로 어댑터 보기 채우기</a></li>
      <li><a href="#HandlingUserSelections">클릭 이벤트 처리</a></li>
    </ol>
  </li>
</ol>

  <h2>Key 클래스</h2>
  <ol>
    <li>{@link android.view.View}</li>
    <li>{@link android.view.ViewGroup}</li>
    <li>{@link android.view.ViewGroup.LayoutParams}</li>
  </ol>

  <h2>참고 항목</h2>
  <ol>
    <li><a href="{@docRoot}training/basics/firstapp/building-ui.html">간단한 사용자
인터페이스 구축</a></li> </div>
</div>

<p>레이아웃은 사용자 인터페이스에 대한 시각적 구조를 정의합니다. 예컨대 <a href="{@docRoot}guide/components/activities.html">액티비티</a> 또는 <a href="{@docRoot}guide/topics/appwidgets/index.html">앱 위젯</a>에 대한 UI가 이에 해당됩니다.
레이아웃을 선언하는 데에는 다음과 같은 두 가지 방법이 있습니다.</p>
<ul>
<li><strong>UI 요소를 XML로 선언</strong>. Android가 위젯과 레이아웃 등과 같이
보기 클래스와 하위 클래스에 상응하는 간단한 XML 어휘를 제공합니다.</li>
<li><strong>런타임에 레이아웃 요소를 인스턴트화</strong>. 애플리케이션이
 프로그래밍 방법으로 보기 및 ViewGroup객체를 만들 수 있습니다(그리고 그 속성을 조작하기도 합니다). </li>
</ul>

<p>Android 프레임워크에서는 이와 같이 애플리케이션의 UI를 선언하고 관리하기 위한 메서드를 둘 중 하나만, 또는 둘 모두 사용할 수 있는 유연성을 부여합니다. 예를 들어, 애플리케이션의 기본 레이아웃을 XML로 선언하면서 그 안에 나타날 화면 요소와 그 속성을 포함할 수 있습니다. 그러면 이제 애플리케이션에 코드를 추가하여 화면 객체의 상태를 수정하도록 할 수 있으며, 여기에는 런타임에 XML로 선언된 것도 포함됩니다. </p>

<div class="sidebox-wrapper">
<div class="sidebox">
  <ul>
  <li><a href="{@docRoot}tools/sdk/eclipse-adt.html">Eclipse용 ADT
 플러그인</a>이 XML의 레이아웃 미리보기를 제공합니다. &mdash;
XML 파일이 열린 상태에서 <strong>레이아웃</strong> 탭을 선택하십시오.</li>
  <li>또한,
<a href="{@docRoot}tools/debugging/debugging-ui.html#hierarchyViewer">계층 뷰어</a> 도구로
레이아웃 디버깅도 시도해 보아야 합니다.&mdash;이것은 레이아웃 속성 값을 드러내고,
내부 여백/여백 표시기가 있는 와이어프레임을 그리며 개발자가 에뮬레이터 또는 기기에서 디버깅하는 동안
완전히 렌더링된 보기를 제공합니다.</li>
  <li><a href="{@docRoot}tools/debugging/debugging-ui.html#layoutopt">layoutopt</a> 도구를
 사용하면 레이아웃과 계층을 비효율성 또는 다른 문제에 대하여 재빨리 분석할 수 있게 해줍니다.</li>
</div>
</div>

<p>UI를 XML로 선언하는 것의 이점은 이렇게 하면 애플리케이션을 그 행동을 제어하는 코드로부터 따로 표시하기가 더 좋다는 것입니다. UI 설명은 애플리케이션 코드의 외부에 있습니다. 이는 다시 말해 소스 코드를 수정하고 다시 컴파일링하지 않아도 이를 수정 또는 변경할 수 있다는 뜻입니다. 예를 들어, 서로 다른 화면 방향, 사로 다른 기기 화면 크기 및 서로 다른 언어에 대해 XML 레이아웃을 생성할 수 있습니다. 이외에도 레이아웃을 XML로 선언하면 UI의 구조를 시각화하기가 더 쉬우므로 문제를 디버깅하기도 더 쉽습니다. 따라서, 이 문서는 레이아웃을 XML로 선언하는 방법을 가르치는 데 주안점을 두고 있습니다. 런타임에 보기 객체를 인스턴트화하는 것에 흥미가 있는 경우,
{@link android.view.ViewGroup} 및
{@link android.view.View} 클래스 참조를 참조하십시오.</p>

<p>일반적으로 UI 요소를 선언하는 데 쓰이는 XML 어휘는 클래스와 메서드 명명을 충실히 따릅니다. 여기에서 요소 이름은 클래스 이름에 상응하며 속성 이름은 메서드에 상응합니다. 사실 이러한 일치성은 아주 직접적인 경우가 잦아 어느 XML 속성이 클래스 메서드에 상응하는지를 추측할 수 있고, 어느 클래스가 주어진 XML 요소에 상응하는지도 추측할 수 있습니다. 다만 모든 어휘가 다 같지는 않다는 점을 유의하십시오. 몇몇 경우에는 명명에 약간의 차이점이 있습니다. 예를 들어,
EditText 요소에는 <code>text</code> 속성이 있으며 이는
<code>EditText.setText()</code>에 상응합니다. </p>

<p class="note"><strong>팁:</strong> 여러 가지 레이아웃 유형에 대해서는 <a href="{@docRoot}guide/topics/ui/layout-objects.html">보편적인
레이아웃 객체</a>를 참조하십시오. 여러 가지 레이아웃을 구축하는 데 대한 튜토리얼 모음도 있습니다.
<a href="{@docRoot}resources/tutorials/views/index.html">Hello 보기</a> 튜토리얼 가이드를 참조하십시오.</p>

<h2 id="write">XML 쓰기</h2>

<p>Android의 XML 어휘를 사용하면 UI 레이아웃과 그 안에 들어있는 화면 요소를 HTML에서 웹 페이지를 디자인할 때와 같은 방식으로 신속하게 디자인할 수 있습니다. 즉 일련의 중첩된 요소를 사용하는 것입니다. </p>

<p>각 레이아웃 파일에는 반드시 딱 하나의 루트 요소만 있어야 하며, 이는 보기 또는 ViewGroup 객체여야 합니다. 루트 요소를 정의했으면, 하위 요소로 더 많은 레이아웃 요소 또는 위젯을 추가하여 점층적으로 레이아웃을 정의할 보기 계층을 구축할 수 있습니다. 예를 들어, 다음은 수직 {@link android.widget.LinearLayout}을
 사용하여 {@link android.widget.TextView} 및 {@link android.widget.Button}을 보유하는 XML 레이아웃을 나타낸 것입니다.</p>
<pre>
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent"
              android:orientation="vertical" >
    &lt;TextView android:id="@+id/text"
              android:layout_width="wrap_content"
              android:layout_height="wrap_content"
              android:text="Hello, I am a TextView" />
    &lt;Button android:id="@+id/button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Hello, I am a Button" />
&lt;/LinearLayout>
</pre>

<p>레이아웃을 XML로 선언하고 나면 그 파일을 Android 프로젝트의 <code>res/layout/</code> 디렉터리 내에
<code>.xml</code> 확장자로 저장하여 적절하게 컴파일링되도록 합니다. </p>

<p>레이아웃 XML 파일의 구문에 대한 자세한 정보는 <a href="{@docRoot}guide/topics/resources/layout-resource.html">레이아웃 리소스</a> 문서에서 확인할 수 있습니다.</p>

<h2 id="load">XML 리소스 로딩</h2>

<p>애플리케이션을 컴파일링하는 경우, 각 XML 레이아웃 파일이
{@link android.view.View} 리소스 안에 컴파일링됩니다. 애플리케이션 코드로부터 가져온 레이아웃 리소스는
{@link android.app.Activity#onCreate(android.os.Bundle) Activity.onCreate()} 콜백
구현에 로딩해야 합니다.
이렇게 하려면 <code>{@link android.app.Activity#setContentView(int) setContentView()}</code>를 호출한 다음, 이를
<code>R.layout.<em>layout_file_name</em></code> 형태로 레이아웃 리소스의 참조에 전달합니다.
 예를 들어, XML 레이아웃이 <code>main_layout.xml</code>로 저장된 경우, 이것을 액티비티에 대해 로딩하려면
다음과 같이 하면 됩니다.</p>
<pre>
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main_layout);
}
</pre>

<p>액티비티 내의 <code>onCreate()</code> 콜백 메서드는 액티비티가 시작될 때
Android 프레임워크가 호출합니다(수명 주기에 대한 논의는
<a href="{@docRoot}guide/components/activities.html#Lifecycle">액티비티</a>
 문서에서 확인하십시오).</p>


<h2 id="attributes">속성</h2>

<p>모든 보기 및 ViewGroup 객체는 각자 나름대로의 다양한 XML 속성을 지원합니다.
몇몇 속성은 보기 객체에만 특화되어 있지만(예를 들어, TextView는 <code>textSize</code>
속성을 지원), 이와 같은 속성은 이 클래스를 확장할 수 있는 모든 보기 객체가 상속하기도 합니다.
모든 보기 객체에 공통으로 쓰이는 것도 몇 가지 있습니다. 왜냐하면 이들은 루트 보기 클래스에서 상속된 것이기 때문입니다(예:
<code>id</code> 속성). 그리고 나머지 속성은 "레이아웃 매개변수"로 간주됩니다.
이들은 보기 객체의 특정한 레이아웃 방향을 설명하는 것으로, 이는 해당 객체의 상위 VeiwGroup 객체에서
정의된 바에 따릅니다.</p>

<h3 id="id">ID</h3>

<p>모든 보기 객체에는 연관된 정수 ID가 있을 수 있습니다. 이는 트리 내에서 해당 보기를 고유하게 식별하기 위한 것입니다.
애플리케이션이 컴파일링되면 이 ID가 정수로 참조되지만, ID는
일반적으로 레이아웃 XML 파일에 문자열로 할당되며, <code>id</code> 속성으로 쓰입니다.
이것은 모든 보기 객체에 공통적인 XML 속성으로
({@link android.view.View} 클래스가 정의) 이것을 매우 자주 사용하게 됩니다.
ID에 대한, XML 태그 내에 있는 구문은 다음과 같습니다.</p>
<pre>android:id="&#64;+id/my_button"</pre>

<p>문자열 시작 부분에 있는 앳 기호(@)는 XML 파서가 ID 문자열의 나머지를 구문 분석하고 확장하여
ID 리소스로 식별해야 한다는 것을 나타냅니다. 더하기 기호(+)는 이것이 새 리소스 이름이며,
이것을 반드시 생성하여 우리 리소스에 추가해야 한다는 것을 뜻합니다(<code>R.java</code> 파일에서). Android 프레임워크는 다른 ID 리소스도 아주 많이
제공합니다. Android 리소스 ID를 참조할 때에는 더하기 기호는 필요하지 않지만
<code>android</code> 패키지 네임스페이스를 다음과 같이 반드시 추가해야 합니다.</p>
<pre>android:id="&#64;android:id/empty"</pre>
<p><code>android</code> 패키지 네임스페이스를 제자리에 넣으면 이제 ID를 로컬 리소스 클래스에서가 아니라 <code>android.R</code>
 리소스 클래스에서 참조하고 있는 것이 됩니다.</p>

<p>보기를 생성하고 이를 애플리케이션에서 참조하는 데 쓰이는 보편적인 패턴은 다음과 같습니다.</p>
<ol>
  <li>레이아웃 파일에서 보기/위젯을 정의한 다음 이를 고유한 ID에 할당합니다.
<pre>
&lt;Button android:id="&#64;+id/my_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="&#64;string/my_button_text"/>
</pre>
  </li>
  <li>그런 다음 보기 객체의 인스턴스를 생성하고 이를 레이아웃에서 캡처합니다
(일반적으로 <code>{@link android.app.Activity#onCreate(Bundle) onCreate()}</code> 메서드에서).
<pre>
Button myButton = (Button) findViewById(R.id.my_button);
</pre>
  </li>
</ol>
<p>{@link android.widget.RelativeLayout}을 생성할 때에는 보기 객체의 ID를 정의하는 것이 중요합니다.
관계 레이아웃에서는 형제 보기가 또 다른 형제 보기와 관련된 자신의 레이아웃을 정의할 수 있으며,
이를 고유한 ID로 참조하게 됩니다.</p>
<p>ID는 트리 전체를 통틀어 고유할 필요는 없지만, 트리에서 검색하고 있는 부분 내에서는
고유해야 합니다(이것이 트리 전체인 경우가 잦으므로, 가급적이면 완전히
고유한 것을 쓰는 것이 가장 좋습니다).</p>


<h3 id="layout-params">레이아웃 매개변수</h3>

<p><code>layout_<em>something</em></code>이라는 XML 레이아웃 속성이
보기가 상주하는 ViewGroup에 대해 적절한 보기의 레이아웃 매개변수를 정의합니다.</p>

<p>모든 ViewGroup 클래스가 중첩된 클래스를 하나씩 구현하며 이것이 {@link
android.view.ViewGroup.LayoutParams}를 확장합니다. 이 하위 클래스에는
각 하위 보기의 크기와 위치를 보기 그룹에 적절한 방식으로 정의하는
속성 유형이 들어 있습니다. 그림 1에서 볼 수 있듯이, 상위 보기 그룹이
각 하위 보기의 레이아웃 매개변수를 정의합니다(하위 보기 그룹 포함).</p>

<img src="{@docRoot}images/layoutparams.png" alt="" />
<p class="img-caption"><strong>그림 1.</strong> 각 보기와 연관된 레이아웃 매개변수가
있는 보기 계층을 시각화한 것입니다.</p>

<p>모든 LayoutParams 하위 클래스에는 설정 값에 대한 각기 자신만의 구문이 있다는 점을
눈여겨 보십시오. 각 하위 요소는 자신의 상위에 적합한 LayoutParams를 정의해야 합니다.
다만 이것은 자신의 하위에 대해 각기 다른 LayoutParams도 정의할 수 있습니다. </p>

<p>모든 보기 그룹에는 너비와 높이가 포함되며(<code>layout_width</code> 및
<code>layout_height</code>), 각 보기는 이들을 반드시 정의해야 합니다. 선택 사항으로
여백과 테두리도 포함하는 LayoutParams도 많습니다. <p>

<p>너비와 높이는 정확한 치수로 지정할 수 있습니다. 다만 이것은 자주 하지
않는 것이 좋습니다. 그보다는 다음과 같은 상수 중 하나를 사용하여 너비 또는 높이를 설정하는 경우가
더 많습니다. </p>

<ul>
  <li><var>wrap_content</var> 보기에 콘텐츠에 필요한 치수대로 알아서
크기를 조정하라고 합니다.</li>
  <li><var>match_parent</var> (다른 이름은 <var>fill_parent</var> 로, API 레벨 8 이전에 해당)
보기에 상위 보기 그룹이 허용하는 한 최대한으로 커지라고 합니다.</li>
</ul>

<p>일반적으로 픽셀과 같이 절대적인 단위를 사용하여 레이아웃 너비와 높이를 지정하는 것은
권장하지 않습니다. 그 대신, 밀도 독립적인 픽셀 단위와 같이 상대적인 측정치를
사용하는 것(<var>dp</var>), <var>wrap_content</var>, 또는
<var>match_parent</var>등이 더 낫습니다. 이렇게 하면
애플리케이션이 다양한 기기 화면 크기에 걸쳐서도 적절하게 표시되도록 보장하는 데 도움이 되기 때문입니다.
허용된 측정 유형은
<a href="{@docRoot}guide/topics/resources/available-resources.html#dimension">
사용 가능한 리소스</a>에 정의되어 있습니다.</p>


<h2 id="Position">레이아웃 위치</h2>
   <p>
   보기의 모양은 직사각형입니다. 보기에는 위치가 있으며, 이는
 한 쌍의 <em>왼쪽</em> 및 <em>상단</em> 좌표, 그리고 두 개의 치수가 너비와 높이를 나타내는
형식으로 표현됩니다. 위치와 치수의 단위는 픽셀입니다.

   </p>

   <p>
   보기의 위치를 검색할 수 있습니다.
{@link android.view.View#getLeft()} 및 {@link android.view.View#getTop()} 메서드를 호출하면 됩니다. 전자는 보기를
나타내는 직사각형의 왼쪽, 즉 X 좌표를 반환합니다. 후자는 보기를
나타내는 직사각형의 상단, 즉 Y 좌표를 반환합니다. 이들 메서드는 둘 다
보기의 위치를 해당 보기의 상위와 관련지어 반환합니다. 예를 들어,
<code>getLeft()</code>가 20을 반환하는 경우 이는 해당 보기가 그 보기의 바로 상위의 왼쪽 가장자리에서
오른쪽으로 20픽셀 떨어진 곳에 있다는 뜻입니다.
   </p>

   <p>
   이외에도 불필요한 계산을 피하기 위해 여러 가지 편의 메서드가 제공됩니다.
구체적으로 {@link android.view.View#getRight()} 및 {@link android.view.View#getBottom()}을 들 수 있습니다.
   이들 메서드는 해당 보기를 나타내는 직사각형의 오른쪽과 하단 가장자리의 좌표를 반환합니다.
 예를 들어 {@link android.view.View#getRight()}를
 호출하는 것은 다음 계산과 비슷합니다. <code>getLeft() + getWidth()</code>
   </p>


<h2 id="SizePaddingMargins">크기, 안쪽 여백 및 여백</h2>
   <p>
   보기의 크기는 너비와 높이로 표현됩니다. 사실 하나의 보기는
두 쌍의 너비 및 높이 값을 소유합니다.
   </p>

   <p>
   첫 번째 쌍을 <em>측정된 너비</em> 및
<em>측정된 높이</em>라고 합니다. 이들 치수는 보기가
상위 내에서 얼마나 커지고자 하는지를 정의합니다. 측정된
치수를 가져오려면 {@link android.view.View#getMeasuredWidth()}
 및 {@link android.view.View#getMeasuredHeight()}를 호출하면 됩니다.
   </p>

   <p>
   두 번째 쌍은 단순히 <em>너비</em> 및 <em>높이</em>라고 일컬으며,
때로는 <em>그리기 너비</em> 및 <em>그리기 높이</em>로 부를 때도 있습니다. 이러한
치수는 그리기 시간 및 레이아웃 후에 보기가 화면에 표시되는 실제 크기를
정의합니다. 이들 값은 측정된 너비 및 높이와 달라도 되지만
꼭 달라야 하는 것은 아닙니다. 너비와 높이를 가져오려면
{@link android.view.View#getWidth()} 및 {@link android.view.View#getHeight()}를 호출하면 됩니다.
   </p>

   <p>
   보기의 치수를 측정하려면 보기는 자신의 안쪽 여백을 감안합니다. 안쪽 여백은
보기의 왼쪽, 상단, 오른쪽 및 하단 부분에 대해 픽셀로 표시됩니다.
   안쪽 여백은 정해진 픽셀 수를 사용하여 보기의 콘텐츠를 오프셋하는 데 쓰일 수도
있습니다. 예를 들어 왼쪽 안쪽 여백을 2로 설정하면 해당 보기의 콘텐츠를 왼쪽 가장자리에서
오른쪽으로 2픽셀 밀어냅니다. 안쪽 여백을 설정할 때에는
{@link android.view.View#setPadding(int, int, int, int)} 메서드를 사용하면 되고, 이를 쿼리하려면
{@link android.view.View#getPaddingLeft()}, {@link android.view.View#getPaddingTop()},
{@link android.view.View#getPaddingRight()} 및 {@link android.view.View#getPaddingBottom()}을 사용하면 됩니다.
   </p>

   <p>
   보기가 안쪽 여백을 정의할 수는 있지만, 여백에 대한 지원은 전혀 제공하지
않습니다. 다만 보기 그룹이 그와 같은 지원을 제공합니다. 자세한 정보는
{@link android.view.ViewGroup} 및
{@link android.view.ViewGroup.MarginLayoutParams}를 참조하십시오.
   </p>

   <p>치수에 대한 자세한 정보는
<a href="{@docRoot}guide/topics/resources/more-resources.html#Dimension">치수 값</a>을 참조하십시오.
   </p>






<style type="text/css">
div.layout {
  float:left;
  width:200px;
  margin:0 0 20px 20px;
}
div.layout.first {
  margin-left:0;
  clear:left;
}
</style>




<h2 id="CommonLayouts">보편적인 레이아웃</h2>

<p>{@link android.view.ViewGroup} 클래스의 각 하위 클래스는 각기 고유한 방식으로 자신 안에
중첩한 보기를 표시합니다. 아래는 Android 플랫폼에서 기본 제공되는, 보다 보편적인 레이아웃 유형을
몇 가지 나타낸 것입니다.</p>

<p class="note"><strong>참고:</strong> 하나 이상의 레이아웃을 또 다른 레이아웃에 중첩하여
UI 디자인을 이룰 수도 있지만, 레이아웃 계층을 가능한 한 얕게 유지하도록
애써야 합니다. 중첩된 레이아웃이 적을수록 레이아웃이 더욱 빠르게 그려집니다(가로로 넓은 보기 계층이
깊은 보기 계층보다 낫습니다).</p>

<!--
<h2 id="framelayout">FrameLayout</h2>
<p>{@link android.widget.FrameLayout FrameLayout} is the simplest type of layout
object. It's basically a blank space on your screen that you can
later fill with a single object &mdash; for example, a picture that you'll swap in and out.
All child elements of the FrameLayout are pinned to the top left corner of the screen; you cannot
specify a different location for a child view. Subsequent child views will simply be drawn over
previous ones,
partially or totally obscuring them (unless the newer object is transparent).
</p>
-->


<div class="layout first">
  <h4><a href="layout/linear.html">선형 레이아웃</a></h4>
  <a href="layout/linear.html"><img src="{@docRoot}images/ui/linearlayout-small.png" alt="" /></a>
  <p>여러 하위를 하나의 가로 방향 또는 세로 방향 행으로 정리하는 레이아웃. 이것은
창의 길이가 화면 길이를 웃도는 경우 스크롤 막대를 만듭니다.</p>
</div>

<div class="layout">
  <h4><a href="layout/relative.html">관계 레이아웃</a></h4>
  <a href="layout/relative.html"><img src="{@docRoot}images/ui/relativelayout-small.png" alt="" /></a>
  <p>여러 하위 객체의 위치를 서로 관련지어 나타내거나(하위 A가
하위 B의 왼쪽), 상위와 관련지어 나타낼 수 있도록 해줍니다(상위의 맨 위에 맞춰 정렬).</p>
</div>

<div class="layout">
  <h4><a href="{@docRoot}guide/webapps/webview.html">웹 보기</a></h4>
  <a href="{@docRoot}guide/webapps/webview.html"><img src="{@docRoot}images/ui/webview-small.png" alt="" /></a>
  <p>웹 페이지를 표시합니다.</p>
</div>




<h2 id="AdapterViews" style="clear:left">어댑터로 레이아웃 구축하기</h2>

<p>레이아웃의 콘텐츠가 동적이거나 미리 정의되지 않은 경우,
{@link android.widget.AdapterView}의 하위 클래스가 되는 레이아웃을 사용하여 런타임에 보기로 레이아웃을 채울 수 있습니다.
{@link android.widget.AdapterView} 클래스의 하위 클래스는 {@link android.widget.Adapter}를
사용하여 자신의 레이아웃에 데이터를 바인딩합니다. {@link android.widget.Adapter}가 데이터 소스와 {@link android.widget.AdapterView}
 레이아웃 사이의 중개자 역할을 합니다. &mdash;{@link android.widget.Adapter}가
 데이터를 검색하여(배열 또는 데이터베이스 쿼리와 같은 소스로부터)
각 항목을 보기로 변환해서 {@link android.widget.AdapterView} 레이아웃에 추가될 수 있도록 합니다.</p>

<p>어댑터로 지원되는 보편적인 레이아웃의 몇 가지 예는 다음과 같습니다.</p>

<div class="layout first">
  <h4><a href="layout/listview.html">목록 보기</a></h4>
  <a href="layout/listview.html"><img src="{@docRoot}images/ui/listview-small.png" alt="" /></a>
  <p>스크롤로 내리는 하나의 열 목록을 표시합니다.</p>
</div>

<div class="layout">
  <h4><a href="layout/gridview.html">눈금 보기</a></h4>
  <a href="layout/gridview.html"><img src="{@docRoot}images/ui/gridview-small.png" alt="" /></a>
  <p>스크롤로 내리는 열과 행의 눈금을 표시합니다.</p>
</div>



<h3 id="FillingTheLayout" style="clear:left">데이터로 어댑터 보기 채우기</h3>

<p>{@link android.widget.ListView} 또는
{@link android.widget.GridView}와 같은 {@link android.widget.AdapterView}를 채우려면 {@link android.widget.AdapterView} 인스턴스를
{@link android.widget.Adapter}에 바인딩하면 됩니다. 이는 외부 소스로부터 데이터를 검색하여 각 데이터 항목을 나타내는 {@link
android.view.View}를 생성합니다.</p>

<p>Android는 {@link android.widget.Adapter}의 하위 클래스를 여러 개 제공합니다.
이는 여러 가지 종류의 데이터를 검색하고 {@link android.widget.AdapterView}에 대한 보기를 구축하는 데 유용합니다.
가장 보편적인 어댑터 두 가지를 예로 들면 다음과 같습니다.</p>

<dl>
  <dt>{@link android.widget.ArrayAdapter}</dt>
    <dd>이 어댑터는 데이터 소스가 배열일 때 사용하십시오. 기본적으로 {@link
android.widget.ArrayAdapter}가 각 항목에서 {@link
java.lang.Object#toString()}를 호출하고 그 콘텐츠를 {@link
android.widget.TextView}에 배치함으로써 각 배열 항목에 대한 보기를 생성합니다.
      <p>예를 들어, {@link
android.widget.ListView}로 문자열 배열을 표시하고자 하는 경우, 생성자를 사용하여
새로운 {@link android.widget.ArrayAdapter}를 초기화해서 각 문자열과 문자열 배열에 대한 레이아웃을 지정하면 됩니다.</p>
<pre>
ArrayAdapter&lt;String> adapter = new ArrayAdapter&lt;String>(this,
        android.R.layout.simple_list_item_1, myStringArray);
</pre>
<p>이 생성자에 대한 인수는 다음과 같습니다.</p>
<ul>
  <li>개발자의 앱 {@link android.content.Context}</li>
  <li>배열에 있는 각 문자열에 대한 {@link android.widget.TextView}가 들어있는 레이아웃</li>
  <li>문자열 배열</li>
</ul>
<p>그런 다음 {@link android.widget.ListView}에서
{@link android.widget.ListView#setAdapter setAdapter()}를 호출하기만 하면 됩니다.</p>
<pre>
ListView listView = (ListView) findViewById(R.id.listview);
listView.setAdapter(adapter);
</pre>

      <p>각 항목의 외관을 사용자 지정하려면 배열의 객체에 대한 {@link
java.lang.Object#toString()} 메서드를 재정의하면 됩니다. 아니면, 각 항목에 대하여
{@link android.widget.TextView}가 아닌 다른 보기를 생성하고자 하는 경우(예를 들어 각 배열 항목에
{@link android.widget.ImageView}를 원하는 경우), {@link
android.widget.ArrayAdapter} 클래스를 확장하고 {@link android.widget.ArrayAdapter#getView
getView()}를 재정의하여 각 항목에 대해 원하는 유형의 보기를 반환하도록 할 수 있습니다.</p>

</dd>

  <dt>{@link android.widget.SimpleCursorAdapter}</dt>
    <dd>이 어댑터는 데이터 출처가 {@link android.database.Cursor}일 때 사용하십시오.
{@link android.widget.SimpleCursorAdapter}를 사용하는 경우,
{@link android.database.Cursor}에 있는 각 행에 대하여 사용할 레이아웃을 지정해야 합니다. 또한 {@link android.database.Cursor}
의 어느 열이 레이아웃의 어느 보기에 삽입되어야 할지도 지정해야 합니다. 예를 들어 사람 이름과
전화번호로 이루어진 목록을 생성하고자 하는 경우, 각 사람에 대해 행이 하나씩 있고 이름과 번호에 대해 열이 들어있는 {@link
android.database.Cursor}를 반환하는 쿼리를 수행하면 됩니다.
 그런 다음 레이아웃에서 각 결과에 대하여 {@link
android.database.Cursor}의 어느 열을 원하는지 지정하는 문자열 배열을 만들 수 있고, 각 열이 배치되어야 하는
상응하는 보기를 지정하는 정수 배열을 만들면 됩니다.</p>
<pre>
String[] fromColumns = {ContactsContract.Data.DISPLAY_NAME,
                        ContactsContract.CommonDataKinds.Phone.NUMBER};
int[] toViews = {R.id.display_name, R.id.phone_number};
</pre>
<p>{@link android.widget.SimpleCursorAdapter}를 인스턴트화하는 경우, 각 결과에 대해 사용할 레이아웃과
결과가 들어있는 {@link android.database.Cursor}, 그리고 다음의 두 배열을 전달합니다.</p>
<pre>
SimpleCursorAdapter adapter = new SimpleCursorAdapter(this,
        R.layout.person_name_and_number, cursor, fromColumns, toViews, 0);
ListView listView = getListView();
listView.setAdapter(adapter);
</pre>
<p>그러면 {@link android.widget.SimpleCursorAdapter}가
{@link android.database.Cursor}에 있는 각 행에 대한 보기를 하나씩 생성합니다. 이때 상응하는 {@code toViews} 보기 안에 각 {@code
fromColumns} 항목을 삽입함으로써 제공된 레이아웃을 사용합니다.</p>.</dd>
</dl>


<p>애플리케이션의 수명이 진행되는 동안에 어댑터가 읽는 기본 데이터를 변경하는 경우,
{@link android.widget.ArrayAdapter#notifyDataSetChanged()}를 호출해야 합니다.
이렇게 하면 첨부된 보기에 데이터가 변경되었으며 스스로 새로 고쳐야 한다는 사실을 알려줍니다.</p>



<h3 id="HandlingUserSelections">클릭 이벤트 처리</h3>

<p>{@link android.widget.AdapterView}에 있는 각 항목에서의 클릭 이벤트에 응답하려면
{@link android.widget.AdapterView.OnItemClickListener} 인터페이스를 구현하면 됩니다. 예:</p>

<pre>
// Create a message handling object as an anonymous class.
private OnItemClickListener mMessageClickedHandler = new OnItemClickListener() {
    public void onItemClick(AdapterView parent, View v, int position, long id) {
        // Do something in response to the click
    }
};

listView.setOnItemClickListener(mMessageClickedHandler);
</pre>



