page.title=適用於開發人員的 Android N
meta.tags="preview", "androidn"
page.tags="preview", "developer preview"
page.image=images/cards/card-n-apis_2x.png
@jd:body




<div id="tb-wrapper">
<div id="tb">
  <h2>主要開發人員功能</h2>
  <ol>
      <ul style="list-style-type:none;">
        <li><a href="#multi-window_support">多視窗支援</a></li>
        <li><a href="#notification_enhancements">通知</a></li>
        <li><a href="#jit_aot">JIT/AOT 編譯</a></li>
        <li><a href="#quick_path_to_app_install">應用程式安裝的快速路徑</a></li>
        <li><a href="#doze_on_the_go">移動時休眠</a></li>
        <li><a href="#background_optimizations">背景最佳化</a></li>
        <li><a href="#data_saver">Data Saver</a></li>
        <li><a href="#tile_api">快速設定磚 API</a></li>
        <li><a href="#number-blocking">拒接號碼</a></li>
        <li><a href="#call_screening">來電過濾</a></li>
        <li><a href="#multi-locale_languages">地區設定與語言</a></li>
        <li><a href="#icu4">Android 中的 ICU4J API</a></li>
        <li><a href="#gles_32">OpenGL ES 3.2 API</a></li>
        <li><a href="#android_tv_recording">Android TV 錄製</a></li>
        <li><a href="#android_for_work">Android for Work</a></li>
        <li><a href="#accessibility_enhancements">協助工具</a></li>
        <li><a href="#direct_boot">直接開機</a></li>
        <li><a href="#key_attestation">金鑰證明</a></li>
        <li><a href="#network_security_config">網路安全性設定</a></li>
        <li><a href="#default_trusted_ca">預設信任的 CA</a></li>
        <li><a href="apk_signature_v2">APK 簽章配置第 2 版</a></li>
        <li><a href="#scoped_directory_access">限定範圍目錄存取</a></li>
      </ol>
</div>
</div>



<p>Android N 仍在開發中，但是您現在可以透過「N Developer Preview」來試用。下面各節重點說明適用於開發人員的一些新功能。

 </p>

<p>
  請務必查看<a href="{@docRoot}preview/behavior-changes.html">行為變更</a>以瞭解哪些平台變更部分會影響您的應用程式、閱讀開發人員指南以瞭解主要功能，以及下載 <a href="{@docRoot}preview/setup-sdk.html#docs-dl">API 參考資料</a>以深入瞭解新 API 的詳細資訊。



</p>

<h2 id="multi-window_support">多視窗支援</h2>


<p>在 Android N 中，我們將許多人要求的新多工功能引進到平台 &mdash; 多視窗支援。
 </p>

  <p>使用者現在可以一次在螢幕上開啟兩個應用程式。 </p>
  <ul>
  <li>在執行 Android N 的手機與平板電腦上，使用者可以在分割畫面模式中並排或上下排列兩個應用程式。只要拖曳兩個應用程式之間的分隔線，即可調整其大小。


 </li>

<li>在 Android TV 裝置上，應用程式可以將本身放入<a href="{@docRoot}preview/features/picture-in-picture.html">子母畫面模式</a>，讓它們持續顯示內容，同時使用者可以瀏覽其他應用程式或與其互動。請參閱下面內容，以瞭解更多資訊。

 </li>
  </ul>

<div class="col-4of10">
<img src="{@docRoot}images/android-7.0/mw-portrait.png" alt="" style="height:460px;padding-left:1em;" id="img-split-screen" />
<p class="img-caption">
  <strong>圖 1.</strong> 在分割畫面模式中執行的應用程式。
</p>
  </div>

<p>特別是平板電腦與其他螢幕較大的裝置，多視窗支援為您提供吸引使用者的新方式。您甚至可以在應用程式中啟用拖放功能，讓使用者便利地從應用程式拖放內容 &mdash; 這是增強您的使用者體驗的絕佳方式。


 </p>

<p>將多視窗支援新增到您的應用程式並設定它處理多視窗顯示的方式是很直接的作法。例如，您可以指定活動的最小可允許尺寸，避免使用者將活動的尺寸調整到低於該尺寸。您也可以停用應用程式的多視窗顯示，以確保系統只以全螢幕模式顯示您的應用程式。



</p>

<p>
  如需詳細資訊，請參閱<a href="{@docRoot}preview/features/multi-window.html">多視窗支援</a>開發人員文件。

</p>

<h2 id="notification_enhancements">通知增強功能</h2>

<p>我們已重新設計 Android N 中的通知，讓它們更易於使用、速度更快。一些變更包括：
</p>

<ul>
  <li>
    <strong>範本更新</strong>：我們已更新通知範本，在主圖影像和虛擬人偶放入的新強調。開發人員只需對程式碼進行最少的調整，即可發揮新範本的所有功能。


  </li>

  <li>
    <strong>整合式通知</strong>：系統可以將訊息群組到一起 (例如依訊息主題) 並顯示群組。使用者可以直接在群組上執行動作，如「關閉」或「封存」。如果您已實作 Android Wear 的通知，則已經熟悉此模式。




  </li>

  <li>
    <strong>直接回覆</strong>：對於即時通訊應用程式，Android 系統支援內嵌回覆，這樣使用者就能直接在通知介面內快速回應簡訊或文字訊息。


  </li>

  <li>
    <strong>自訂檢視</strong>：兩個新的 API 讓您在通知中使用自訂檢視時可利用系統的裝飾，例如通知標題與動作。


  </li>
</ul>

<div class="col-4of12">
  <img src="{@docRoot}images/android-7.0/notifications-1.png" alt="" style="padding:.5em;max-width:226px">
</div>

<div class="col-4of12">
  <img src="{@docRoot}images/android-7.0/notifications-3.png" alt="" style="padding:.5em;max-width:226px">
</div>

<div class="col-4of12">
  <img src="{@docRoot}images/android-7.0/notifications-2.png" alt="" style="padding:.5em;max-width:226px">
</div>


<p class="img-caption">
  <strong>圖 2.</strong> 整合式通知與直接回覆。
</p>

<p>如果要瞭解如何實作新的功能，請參閱<a href="{@docRoot}preview/features/notification-updates.html">通知</a>指南。

</p>



<h2 id="jit_aot">設定檔指引 JIT/AOT 編譯</h2>

<p>在 Android N 中，我們新增了 Just in Time (JIT) 編譯器搭配程式碼分析工具到 ART，讓 Android 應用程式在執行時能夠持續改善其效能。JIT 編譯器補充了 ART 目前的 Ahead of Time (AOT) 編譯器，協助改善執行階段效能、節省儲存空間以及加速應用程式更新和系統更新。



</p>

<p>設定檔指引編譯讓 ART 根據每個應用程式的實際用情形與裝置上的情況來管理其 AOT/JIT 編譯。例如，ART 會維護每個應用程式常用方法的設定檔，而且可以預先編譯和快取那些方法以獲得最佳效能。它不會編譯應用程式的其他部分，直到實際要使用這些部分時才會編譯。



</p>

<p>除了改善應用程式關鍵部分的效能以外，設定檔指引編譯還有助於降低應用程式的整體 RAM 使用量，包括關聯的二進位檔案。此功能對於低記憶體裝置特別重要。

</p>

<p>ART 透過對裝置電池產生最小影響的方式來管理設定檔指引編譯。它只會在裝置閒置和充電時預先編譯，這種預先工作的方式可以節省時間和電池電力。

</p>

<h2 id="quick_path_to_app_install">應用程式安裝的快速路徑</h2>

<p>ART JIT 編譯器的最實質好處之一是加速應用程式安裝和系統更新。即使是在 Android 6.0 上需要數分鐘來最佳化和安裝的大型應用程式，現在只需幾秒鐘就可以安裝。系統更新也會變得更快，因為不再需要最佳化步驟。


 </p>

<h2 id="doze_on_the_go">移動時休眠...</h2>

<p>Android 6.0 引進休眠功能，這是可節省電池電力的系統模式，它會在裝置閒置時 (例如放在桌子上或抽屜中) 延後應用程式的 CPU 與網路活動。

 </p>

<p>現在 Android N 中的休眠功能更進一步進展，可在移動時節省電池電力。只要螢幕關閉一段時間且裝置拔除電源的情況下，休眠功能就會將熟悉的 CPU 與網路限制的子集套用到應用程式。這表示即使使用者將裝置放在口袋內時也可以節省電池電力。



</p>


<img src="/preview/images/doze-diagram-1.png" alt="" id="figure1" />
<p class="img-caption">
  <strong>圖 3.</strong> 休眠功能現在可套用限制，即使裝置沒有固定在一處時，也能改善電池使用時間。

</p>


<p>當裝置使用電池時，在螢幕關閉短時間後，休眠功能會限制網路存取並延遲工作與同步處理。在短暫的維護時段中，應用程式可存取網路並執行延遲的工作/同步處理。裝置螢幕開啟或插上電源可讓裝置離開休眠狀態。



</p>

<p>當裝置再次固定不動，且螢幕關閉並使用電池一段時間後，休眠功能會在
{@link
android.os.PowerManager.WakeLock}, {@link android.app.AlarmManager} 鬧鐘和 GPS/Wi-Fi 掃描上套用完整的 CPU 與網路限制。
</p>

<p>讓應用程式適應休眠功能的最佳做法，無論裝置在移動中或固定不動都是一樣的，所以如果您已經更新應用程式使其能夠處理休眠，就完全沒問題。如果沒有，現在就<a href="{@docRoot}training/monitoring-device-state/doze-standby.html#assessing_your_app">讓您的應用程式適應休眠功能</a>。


</p>

<h2 id="background_optimizations">專案 Svelte：背景最佳化</h2>

<p>專案 Svelte 一直努力在生態系統中讓各種 Android 裝置上系統與應用程式使用最少的 RAM。在 Android N 中，「專案 Svelte」專注於最佳化應用程式在背景執行的方式。

 </p>

<p>背景處理是大多數應用程式的必要部分。如果正確地處理，它可讓您擁有令人驚歎的使用者體驗 &mdash; 立即、快速、內容感知。如果沒有適當處理，背景處理就會不必要地耗用 RAM (與電池電力)，而且影響其他應用程式的系統效能。


 </p>

<p>自 Android 5.0 開始，{@link android.app.job.JobScheduler} 就以適合使用者的偏好方式來執行背景工作。應用程式可以排程工作，同時讓系統根據記憶體、電源和連線狀況進行最佳化。JobScheduler 提供控制權和簡潔性，我們希望所有應用程式都使用它。



 </p>

<p>
  另一個好用的選項是 <a href="https://developers.google.com/android/reference/com/google/android/gms/gcm/GcmNetworkManager"><code>GCMNetworkManager</code></a>，它屬於 Google Play 服務的一部分，提供類似的工作排程功能，可與舊版 Android 相容。



</p>

<p>我們會繼續擴充 <code>JobScheduler</code> 和 <code>GCMNetworkManager</code> 以滿足您的更多使用案例 &mdash; 例如，在 Android N 中，現在您可以根據內容提供者中的變更來排程背景工作。同時，我們也開始取代一些會降低系統效能 (特別是低記憶體裝置) 的較舊模式。




</p>

<p>在 Android N 中，我們移除了三個常用的隱含廣播 &mdash; {@link android.net.ConnectivityManager#CONNECTIVITY_ACTION}、{@link
  android.hardware.Camera#ACTION_NEW_PICTURE} 和 {@link
  android.hardware.Camera#ACTION_NEW_VIDEO} &mdash; 因為它們會一次喚醒多個應用程式的背景處理程序，而耗盡記憶體與電池電力。如果您的應用程式收到這些廣播，請改為使用「N Developer Preview」遷移到 <code>JobScheduler</code> 與相關的 API。



 </p>

<p>
  看看<a href="{@docRoot}preview/features/background-optimization.html">背景最佳化</a>文件，以瞭解詳細資訊。

</p>


<h2 id="data_saver">Data Saver</h2>

<div class="col-5of12" style="margin-right:1.5em;">
<img src="{@docRoot}images/android-7.0/datasaver.png" style="border:2px solid #ddd">

<p class="img-caption" style="padding-right:2em;">
  <strong>圖 4.</strong> [設定] 中的 Data Saver。
</p>
  </div>

<p>在行動裝置的使用壽命期間，行動數據方案的費用通常會超過裝置本身的費用。對於許多使用者而言，行動數據是他們想要節省的昂貴資源。

 </p>

<p>Android N 引進 Data Saver 模式，這是一個新的系統服務，有助於降低應用程式的行動數據用量，無論是漫遊、接近帳單週期結束時或小量預付數據包。Data Saver 讓使用者控制應用程式如何使用行動數據，也讓開發人員在 Data Saver 開啟時提供更有效率的服務。



 </p>

<p>當使用在 [設定]<strong></strong> 中啟用 Data Saver 且裝置使用計量付費網路時，系統會封鎖背景數據使用量，並指示前景的應用程式盡量使用較少的數據 &mdash; 例如，限制串流的位元率、降低影像品質、延遲開放式預先快取等等。使用者可以將特定應用程式新增到允許清單，以便即使在 Data Saver 為開啟狀態時，這些應用程式仍可在背景使用計量付費的數據使用量。




</p>

<p>Android N 擴充 {@link android.net.ConnectivityManager} 為應用程式提供<a href="{@docRoot}preview/features/data-saver.html#status">擷取使用者的 Data Saver 喜好設定</a>與<a href="{@docRoot}preview/features/data-saver.html#monitor-changes">監視喜好設定變更</a>的方法。所有應用程式應該檢視使用者是否已啟用 Data Saver 並努力限制前景與背景的數據使用量。



</p>


<h2 id="tile_api">快速設定磚 API</h2>


<div style="float:right;max-width:320px">
<img src="{@docRoot}images/android-7.0/quicksettings.png" style="padding-left:1.5em;">

<p class="img-caption" style="padding-left:2em;">
  <strong>圖 5.</strong> 通知欄中的快速設定磚。
</p>


  </div><p>快速設定是直接從通知欄顯示關鍵設定與動作的常用簡單方式。在 Android N 中，我們擴充了快速設定的範圍，讓它變得更實用、更便利。

 </p>

<p>我們也為額外的快速設定磚增加了更多空間，使用者可以透過向左或向右撥動存取分頁顯示區域。我們也讓使用者能夠控制要顯示的快速設定磚與顯示位置 &mdash; 使用者只需拖放磚，即可新增或移除它們。


 </p>

<p>對於開發人員，Android N 也加入了新的 API，讓您定義自己的快速設定磚，以便使用者輕鬆存取您應用程式中的關鍵控制項與動作。
</p>

<p>
  快速設定磚是專為急需或常用的控制項或動作而保留的，它不應該做為啟動應用程式的捷徑。


</p>

<p>
  定義磚之後，您即可將它們顯示給使用者，使用者只需拖放這些磚，即可將它們新增到快速設定中。

</p>

<p>
  如需建立應用程式磚的相關資訊，請參閱可下載之 <a href="{@docRoot}preview/setup-sdk.html#docs-dl">API 參考資料</a>中的 <code>android.service.quicksettings.Tile</code>。

</p>



<h2 id="number-blocking">拒接號碼</h2>

<p>Android N 現在在平台中支援拒接號碼，並提供一個架構 API，讓服務提供者維護一份拒接號碼清單。預設的簡訊應用程式、預設的電話應用程式與提供者應用程式可以讀取及寫入拒接號碼清單。其他應用程式無法存取該清單。


</p>

<p>透過讓拒絕號碼成為平台上的標準功能，Android 為應用程式提供一個一致的方式，讓它們在各種裝置上都能支援拒接號碼。應用程式可以利用的其他好處包括：

</p>

<ul>
  <li> 如果為某個號碼設定來電拒接，也會拒收該號碼的簡訊
  <li> 透過備份與還原功能，即使經過重設或使用不同的裝置，也可持續保存

  <li> 多個應用程式可使用同一份拒接號碼清單
</ul>

<p>此外，透過 Android 整合行動通訊業者應用程式，表示行動通訊業者可以讀取裝置上的拒接號碼清單並為使用者執行服務端的拒接號碼，因此停止拒接號碼的來電和簡訊透過任何媒體 (例如 VOIP 端點或來電轉接) 連絡到使用者。


</p>

<p>
  如需詳細資訊，請參閱可下載之 <a href="{@docRoot}preview/setup-sdk.html#docs-dl">API 參考資料</a>中的 <code>android.provider.BlockedNumberContract</code>。


</p>

<h2 id="call_screening">來電過濾</h2>

<p>
  Android N 能讓預設電話應用程式過濾來電。電話應用程式執行的方法是實作新的<code>CallScreeningService</code>，它可以讓電話應用程式根據來電的 {@link android.telecom.Call.Details Call.Details} 來執行數個動作，例如：



</p>

<ul>
  <li> 拒接來電
  <li> 不允許將來電記錄到通話紀錄
  <li> 不對使用者顯示來電通知
</ul>

<p>
  如需詳細資訊，請參閱可下載之 <a href="{@docRoot}preview/setup-sdk.html#docs-dl">API 參考資料</a>中的 <code>android.telecom.CallScreeningService</code>。


</p>


<h2 id="multi-locale_languages">多地區設定支援，更多語言</h2>


<p>Android N 現在可讓使用者在 [設定] 中選取<strong>多個地區設定</strong>，以便以更好的方式支援雙語言使用案例。應用程式可以使用新的 API 取得使用者選取的地區設定，然後為多地區設定使用者提供更精細的使用者體驗 &mdash; 例如以多語言顯示搜尋結果，以及不為使用者已經熟知語言的網頁提供翻譯。




</p>

<p>除了多地區設定支援，Android N 也擴充了供使用者選用的語言選項。它為每種常用語言 (例如英文、西班牙文、法文與阿拉伯文) 提供 25 種變體。它也增加了對 100 種以上新語言的支援。


</p>

<p>應用程式呼叫 <code>LocaleList.GetDefault()</code> 即可取得使用者設定的地區設定清單。為了支援擴充的地區設定數目，Android N 變更了它解析資源的方式。請務必測試並確認您的應用程式使用新的資源解析邏輯時可正常運作。

</p>

<p>如果要深入瞭解新的資源解析行為與應該遵循的最佳做法，請參閱<a href="{@docRoot}preview/features/multilingual-support.html">多語言支援</a>。
</p>

<h2 id="icu4">Android 中的 ICU4J API</h2>

<p>
  Android N 現在在 <code>android.icu</code> 套件下的 Android 架構中提供一個 <a href="http://site.icu-project.org/">ICU4J</a> API 子集。遷移很容易，大部分要承擔只是從 <code>com.java.icu</code> 命名空間變更為 <code>android.icu</code> 即可。如果您已經在應用程式中使用 ICU4J 套件組合，只要切換到 Android 架構中提供的 <code>android.icu</code> API，即可顯著縮減 APK 的大小。





</p>

<p>
  如果要深入瞭解 Android ICU4J API，請參閱 <a href="{@docRoot}preview/features/icu4j-framework.html">ICU4J 支援</a>。
</p>



<h2 id="gles_32">OpenGL&trade; ES 3.2 API</h2>

<p>Android N 針對 OpenGL ES 3.2 新增架構介面與平台支援，包括：</p>

<ul>
  <li> <a class="external-link" href="https://www.khronos.org/registry/gles/extensions/ANDROID/ANDROID_extension_pack_es31a.txt">Android 延伸套件</a></a> (AEP) 中的所有延伸套件，但 <code>EXT_texture_sRGB_decode</code> 除外。
  <li> HDR 的浮點畫面緩衝區與延遲著色。
  <li> BaseVertex 繪圖呼叫 (可啟用更好的批次處理與串流)。
  <li> 穩定的緩衝區存取控制 (可降低 WebGL 額外負荷)。
</ul>

<p>Android N 上 OpenGL ES 3.2 的架構 API 提供 <code>GLES32</code> 類別。使用 OpenGL ES 3.2 時，請務必在宣示說明檔案中使用 <code>&lt;uses-feature&gt;</code> 標籤與 <code>android:glEsVersion</code> 屬性宣告需求。


 </p>

<p>如需使用 OpenGL ES (包括如何在執行階段檢查裝置支援的 OpenGL ES 版本) 的詳細資訊，請參閱 <a href="{@docRoot}guide/topics/graphics/opengl.html">OpenGL ES API 指南</a>。
</p>


<h2 id="android_tv_recording">Android TV 錄製</h2>

<p>Android N 透過新的錄製 API，新增了錄製和播放 Android TV 輸入服務內容的功能。以現有的時間位移 API 為建置基礎，TV 輸入服務可以控制要錄製哪個頻道的資料、如何儲存已錄製的時段，以及管理使用者與錄製內容的互動。


 </p>

<p>如需詳細資訊，請參閱 <a href="{@docRoot}preview/features/tv-recording-api.html">Android TV 錄製 API</a>。</p>


<h2 id="android_for_work">Android for Work</h2>

<p>Android for Work 為執行 Android N 的裝置增加了許多新的功能與 API。一些亮點如下所示 &mdash; 如需與 Android N 相關之 Android for Work 更新的完整清單，請參閱「Android for Work 變更」。

</p>

<h3 id="work_profile_security_challenge">工作設定檔安全性查問 </h3>

<p>
  設定檔擁有者可以為以工作設定檔執行之應用程式指定個別的安全性查問。當使用者嘗試開啟任何工作應用程式時會顯示工作查問。成功完成安全性查問可將工作設定檔解鎖並在必要時將它解密。對於設定檔擁有者而言，<code>ACTION_SET_NEW_PASSWORD</code> 會提示使用者設定工作查問，而且 <code>ACTION_SET_NEW_PARENT_PROFILE_PASSWORD</code> 會提示使用者設定裝置鎖定。






</p>

<p>
  設定檔擁有者可以使用 <code>setPasswordQuality()</code>、<code>setPasswordMinimumLength()</code> 與相關方法，為工作查問設定各自的密碼原則 (例如，需要 PIN 的時間長度，或是否使用指紋來將設定檔解鎖)。設定檔使用者也可以使用新的 <code>getParentProfileInstance()</code> 方法傳回的 <code>DevicePolicyManager</code> 執行個體來設定裝置鎖定。此外，設定檔擁有者還可以使用新的 <code>setOrganizationColor()</code> 與 <code>setOrganizationName()</code> 方法，為工作查問自訂認證畫面。








</p>
<h3 id="turn_off_work">關閉工作 </h3>

<p>在具有工作設定檔的裝置上，使用者可以切換工作模式。當工作模式關閉時，受管理的使用者會暫時關機，因此而停用工作設定檔應用程式、背景同步與通知。這也包括設定檔擁有者應用程式。當工作模式關閉時，系統會顯示持續的狀態圖示，提醒使用者他們無法啟動工作應用程式。啟動器會指出工作應用程式和小工具無法存取。




 </p>

<h3 id="always_on_vpn">一律開啟的 VPN </h3>

<p>裝置擁有者和設定檔擁有者可確保工作應用程式一律透過指定的 VPN 連線。系統會自動在裝置開機時啟動該 VPN。

</p>

<p>
  新的 <code>DevicePolicyManager</code> 方法是 <code>setAlwaysOnVpnPackage()</code> 與 <code>getAlwaysOnVpnPackage()</code>。


</p>

<p>因為系統無需透過應用程式互動即可直接連結 VPN 服務，所以 VPN 用戶端需要為「一律開啟的 VPN」處理新的進入點。正如以往，透過符合動作 <code>android.net.VpnService</code> 的意圖篩選器向系統指明服務。


 </p>

<p>
  使用者也可以使用 [設定] &gt; [更多] &gt; [VPN]<strong></strong> 手動設定「一律開啟的 VPN」用戶端，這些用戶端在主要使用者中實作 <code>VPNService</code> 方法。


</p>

<h2 id="accessibility_enhancements">協助工具增強功能</h2>

<p>Android N 現在為新的裝置設定在歡迎畫面上直接提供「視覺設定」。這讓使用者更易於在自己的裝置上探索及設定協助工具功能，包括放大手勢、字型大小、顯示大小和 TalkBack。


 </p>

<p>將這些協助工具功能放置在更為顯眼的地方，您的使用者較可能在啟用它們的情況下試用您的應用程式。請務必儘早在啟用這些設定的情況下測試您的應用程式。您可以從 [設定] &gt; [協助工具] 啟用它們。


</p>

<p>此外，在 Android N 中，協助工具服務現在也可以協助行動不便的使用者觸控螢幕。新的 API 允許使用臉部追蹤、眼睛追蹤、點掃描等功能來建置服務，以滿足這些使用者的需要。


</p>

<p>如需詳細資訊，請參閱可下載之 <a href="{@docRoot}preview/setup-sdk.html#docs-dl">API 參考資料</a>中的 <code>android.accessibilityservice.GestureDescription</code>。
	</p>


<h2 id="direct_boot">直接開機</h2>

<p>直接開機可加速裝置啟動時間，並讓已註冊的應用程式只能使用有限的功能 (即使在未預期的重新開機之後)。例如，如果一個加密裝置在使用者睡覺時重新開機，已註冊的鬧鐘、訊息與來電現在可以持續如常通知使用者。這也表示協助工具服務在重新啟動之後可立即使用。




</p>

<p>直接開機利用 Android N 中以檔案為基礎的加密，能夠為系統與應用程式資料使用更精細的加密原則。系統為特定系統資料與明確註冊的應用程式資料使用裝置加密存放區。在預設情況下，所有其他系統資料、使用者資料、應用程式與應用程式資料都會使用認證加密存放區。



 </p>

<p>開機時，系統會以限制模式啟動，它只能存取裝置加密的資料，而無法對應用程式或資料進行一般存取。如果您有想要在這個模式下執行的元件，可以在宣示說明中設定旗標來註冊這些元件。重新啟動之後，系統會透過廣播 <code>LOCKED_BOOT_COMPLETED</code> 意圖來啟用已註冊的元件。系統會確保已註冊的裝置加密應用程式資料可供使用之後才會解除鎖定。所有其他資料都無法使用，直到使用者確認他們的鎖定畫面認證之後，才會將這些資料解密。






 </p>

如需詳細資訊，請參閱<a href="{@docRoot}preview/features/direct-boot.html">直接開機</a>。</p>
</p>


<h2 id="key_attestation">金鑰證明</h2>

<p>硬體支援的金鑰存放區為 Android 裝置上密碼編譯金鑰的建立、儲存及使用提供更安全的方法。它們可保護金鑰不受 Linux 核心、可能的 Android 弱點和從已解鎖裝置擷取的傷害。


</p>

<p>為了讓使用硬體支援的金鑰存放區更易於使用且更安全，Android N 引進金鑰證明。應用程式與裝置外部服務可以使用金鑰證明，毫不懷疑地判斷 RSA 或 EC 金鑰組是否有硬體支援、金鑰組的屬性是哪些以及它的用法和有效性上套用哪些限制條件。



 </p>

<p>應用程式與裝置外部服務可以透過 X.509 證明憑證 (必須以有效的證明金鑰簽署) 來要求有關金鑰組的資訊。證明金鑰是 ECDSA 簽署金鑰，它在裝置出廠時就已內嵌到其中的硬體支援金鑰存放區。因此，以有效證明金鑰簽署的證明憑證可確認裝置上有硬體支援的金鑰存放區，以及該金鑰儲存區中包含之金鑰組的詳細資訊。





</p>

<p>為了確保裝置使用安全的官方 Android 出廠映像，金鑰證明要求裝置的<a class="external-link" href="https://source.android.com/security/verifiedboot/verified-boot.html#bootloader_requirements">開機載入器</a>對<a class="external-link" href="https://source.android.com/security/trusty/index.html">信任執行環境 (TEE)</a> 提供下列資訊：


</p>

<ul>
<li>裝置上安裝的作業系統版本與修補程式層級</li>
<li><a href="https://source.android.com/security/verifiedboot/index.html" class="external-link">Verified Boot</a> 公開金鑰與鎖定狀態</li>
  </ul>

<p>如需硬體支援的金鑰存放區功能的詳細資訊，請參閱<a href="https://source.android.com/security/keystore/" class="external-link">硬體支援的金鑰存放區</a>指南。
</p>

<p>除了金鑰證明之外，Android N 還引進連結指紋的金鑰，在註冊指紋時並不會撤銷。
</p>

<h2 id="network_security_config">網路安全性設定</h2>

<p>在 Android N 中，應用程式可以安全地自訂其安全 (HTTPS、TLS) 連線的行為，無需修改任何程式碼，方法是使用宣告式的<em>網路安全性設定</em>，而不是使用容易出錯的傳統程式設計 API (例如 X509TrustManager)。


</p>

  <p>支援的功能：</p>
<ul>
<li><b>自訂信任錨點。</b>讓應用程式為它的安全連線自訂要信任哪個憑證授權單位 (CA)。例如，信任特定的自我簽署憑證或一組限制的公用 CA。


</li>
<li><b>僅偵錯覆寫。</b>讓應用程式開發人員安全地為應用程式的安全連線進行偵錯，而不會造成已安裝應用程式之使用者的風險。


</li>
<li><b>退出明碼流量。</b>讓應用程式保護自身，不被意外使用明碼流量所危害。
</li>
<li><b>憑證關聯。</b>這個進階功能可讓應用程式為安全連線限制要信任的伺服器金鑰。
</li>
</ul>

<p>如需詳細資訊，請參閱<a href="{@docRoot}preview/features/security-config.html">網路安全性設定</a>。
</p>

<h2 id="default_trusted_ca">預設的信任憑證授權單位</h2>

<p>根據預設，以 Android N 為目標的應用程式只信任系統提供的憑證，而不再信任使用者新增的憑證授權單位 (CA)。以 Android N 為目標且想要信任使用者新增之 CA 的應用程式，應該使用<a href="{@docRoot}preview/features/security-config.html">網路安全性設定</a>來指定信任使用者 CA 的方法。



</p>

<h2 id="apk_signature_v2">APK 簽章配置第 2 版</h2>

<p>PackageManager 類別現在支援使用 APK 簽章配置第 2 版來驗證應用程式。APK 簽章配置第 2 版是全檔案簽章配置，可透過偵測對 APK 檔案所做的任何未授權變更，大幅改善驗證速度並增強完整性保證。


</p>

<p>為了維持回溯相容性，APK 必須先以第 1 版簽章配置 (JAR 簽章配置) 簽署，然後再用第 2 版簽章配置簽署。有了第 2 版簽章配置，如果以第 2 版配置簽署之後，以其他憑證簽署 APK，驗證會失敗。


 </p>

<p>「N Developer Preview」稍後將提供對 APK 簽章配置第 2 版的支援。
</p>

<h2 id="scoped_directory_access">限定範圍目錄存取</h2>

<p>在 Android N 中，應用程式可以使用新的 API 來要求存取特定<a href="{@docRoot}guide/topics/data/data-storage.html#filesExternal">外部儲存空間</a>目錄，包括抽取式媒體 (例如 SD 卡) 上的目錄。新的 API 大幅簡化應用程式存取標準外部儲存空間目錄 (例如 <code>Pictures</code> 目錄) 的方法。相片應用程式之類的應用程式可以使用這些 API 而非使用 <code>READ_EXTERNAL_STORAGE</code>，這樣能夠授予對所有儲存空間目錄的存取權，或是使用「儲存空間存取架構」，讓使用者可以瀏覽到目錄。






</p>

<p>此外，新的 API 也簡化了使用者授予外部儲存空間存取權給您的應用程式時所需採取的步驟。當您使用新的 API 時，系統會使用簡單的權限 UI，清楚地詳細說明應用程式要求存取的目錄。


</p>

<p>如需詳細資訊，請參閱<a href="{@docRoot}preview/features/scoped-folder-access.html">限定範圍目錄存取</a>開發人員文件。

</p>






