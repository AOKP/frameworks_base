page.title=Компоненты приложения
page.landing=true
page.landing.intro=Платформа приложений системы Android позволяет создавать функциональные и инновационные приложения с помощью набора компонентов, которые можно использовать многократно. В этом разделе рассказывается о том, как создавать компоненты, определяющие элементы структуры вашего приложения, и как связывать их воедино с помощью объектов Intent.
page.metaDescription=Платформа приложений системы Android позволяет создавать функциональные и инновационные приложения с помощью набора компонентов, которые можно использовать многократно. В этом разделе рассказывается о том, как создавать компоненты, определяющие элементы структуры вашего приложения, и как связывать их воедино с помощью объектов Intent.
page.landing.image=images/develop/app_components.png
page.image=images/develop/app_components.png

@jd:body

<div class="landing-docs">

  <div class="col-6">
    <h3>Статьи блога</h3>

    <a href="http://android-developers.blogspot.com/2012/05/using-dialogfragments.html">
      <h4>Использование класса DialogFragment</h4>
      <p>В этой статье я расскажу, как с помощью DialogFragment с использованием вспомогательной библиотеки v4 (в целях обеспечения совместимости с устройствами, работающими под управлением системы с версией ниже, чем Honeycomb) можно отобразить простое диалоговое окно редактирования и вернуть результат в вызывающую операцию с помощью интерфейса.</p>
    </a>

    <a href="http://android-developers.blogspot.com/2011/03/fragments-for-all.html">
      <h4>Фрагменты для всех</h4>
      <p>Сегодня мы выпустили библиотеку статических элементов, которая предоставляет доступ к тому же Fragments API (а также новому классу LoaderManager и нескольким другим классам), с тем чтобы приложения, совместимые с Android 1.6 и более поздними версиями, могли использовать фрагменты для создания пользовательских интерфейсов для планшетов. </p>
    </a>

    <a href="http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html">
      <h4>Многопоточность для повышения производительности</h4>
      <p>Для создания быстро реагирующих приложений рекомендуется, чтобы в основном потоке пользовательского интерфейса
выполнялся минимальный объем работы. Любая задача, которая в принципе может выполнять долго и привести к зависанию приложения, должна
обрабатываться в другом потоке.</p>
    </a>
  </div>

  <div class="col-6">
    <h3>Обучение</h3>

    <a href="http://developer.android.com/training/basics/activity-lifecycle/index.html">
      <h4>Управление жизненным циклом операций</h4>
      <p>В этом учебном курсе разъясняются важные методы обратного вызова жизненного цикла, которые получает каждый экземпляр
 операции, и описывается, как их использовать, чтобы операция выполнялась так, как этого ожидает пользователь, и не потребляла системные
 ресурсы, когда они ей не нужны.</p>
    </a>

    <a href="http://developer.android.com/training/basics/fragments/index.html">
      <h4>Создание динамического интерфейса пользователя с использованием фрагментов</h4>
      <p>Данный курс обучения посвящен созданию динамического интерфейса пользователя с использованием
фрагментов и его оптимизации для устройств с экранами разных размеров, включая поддержку
устройств с версией Android 1.6.</p>
    </a>

    <a href="http://developer.android.com/training/sharing/index.html">
      <h4>Общий доступ к контенту</h4>
      <p>В этом курсе обучения рассказывается о некоторых стандартных способах отправки и получения контента
 приложениями с помощью API-интерфейсов Intent и объекта ActionProvider.</p>
    </a>
  </div>

</div>
